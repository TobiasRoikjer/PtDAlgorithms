% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{dph_reward_transform}
\alias{dph_reward_transform}
\title{Performs a discrete reward transformation, returning a discrete phase-type distribution to model the total accumulated reward until abosorption}
\usage{
dph_reward_transform(phase_type_graph, rewards)
}
\arguments{
\item{phase_type_graph}{A reference to the graph created by \code{\link[=create_graph]{create_graph()}}}

\item{rewards}{to give to each vertex, zero or positive integer. Must have length equal to \code{\link[=vertices_length]{vertices_length()}}}
}
\value{
A new discrete phase-type graph with the reward transformation applied
}
\description{
Changes \code{phase_type_graph} to instead model discrete rewarded jumps until absorption,
as described in the paper.
}
\examples{
graph <- ptdalgorithms::create_graph(4)
v2 <- ptdalgorithms::create_vertex(graph, c(4,0,3,3))
v1 <- ptdalgorithms::create_vertex(graph, c(1,2,3,4))
a <- ptdalgorithms::create_vertex(graph, c(0,0,0,0))
ptdalgorithms::add_edge(ptdalgorithms::starting_vertex(graph), v1, 0.5)
ptdalgorithms::add_edge(v1, v2, 0.8)
ptdalgorithms::add_edge(v2, a, 0.5)
# Note that if a defect is desired, the edge has to be explicitly
# added to an absorbing vertex
ptdalgorithms::add_edge(ptdalgorithms::starting_vertex(graph), a, 0.5)
ptdalgorithms::graph_as_dph_matrix(graph) #>
# $`states`
#         [,1] [,2] [,3] [,4]
#   [1,]    1    2    3    4
#   [2,]    4    0    3    3
# $STM
#         [,1]  [,2]
#   [1,]   0.2   0.8
#   [2,]   0.0   0.5
# $IPV
#   [1] 0.5 0
graph <- ptdalgorithms::dph_reward_transform(graph, ptdalgorithms::states(graph)[,2])
ptdalgorithms::graph_as_dph_matrix(graph) #>
# $`states`
# TODO: how will these look?
#         [,1] [,2] [,3] [,4]
#   [1,]    1    2    3    4
#   [2,]    4    0    3    3
# $STM
#         [,1]  [,2]
#   [1,]   0    0.2
#   [2,]   1    0.0
# $IPV
#   [1] 0 0.5

}
